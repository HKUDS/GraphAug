import argparse

def ParseArgs():
    parser = argparse.ArgumentParser(description='Model Params')
    parser.add_argument('--lr', default=1e-3, type=float, help='learning rate')
    parser.add_argument('--batch', default=4096, type=int, help='batch size')
    parser.add_argument('--tstBat', default=256, type=int, help='number of users in a testing batch')
    parser.add_argument('--reg', default=1e-7, type=float, help='weight decay regularizer')
    parser.add_argument('--epoch', default=37, type=int, help='number of epochs')
    parser.add_argument('--decay', default=0.96, type=float, help='weight decay rate')
    parser.add_argument('--save_path', default='our_base_ablation', help='file name to save model and training record')
    parser.add_argument('--latdim', default=32, type=int, help='embedding size')
    parser.add_argument('--gnn_layer', default=2, type=int, help='number of gnn layers')
    parser.add_argument('--load_model', default='our_base', help='model name to load')
    parser.add_argument('--topk', default=20, type=int, help='K of top K')
    parser.add_argument('--topk2', default=40, type=int, help='K of top K')
    parser.add_argument('--keepRate', default=1.0, type=float, help='ratio of edges to keep')
    parser.add_argument('--data', default='gowalla', type=str, help='retail_rocket,kindle')
    parser.add_argument('--ssl_reg', default=1e-2, type=float, help='weight for contrative learning')
    parser.add_argument('--temp', default=0.05, type=float, help='temperature in contrastive learning')
    parser.add_argument('--tstEpoch', default=3, type=int, help='number of epoch to test while training')
    parser.add_argument('--gpu', default='1', type=str, help='indicates which gpu to use')
    parser.add_argument('--graphSampleN', default=15000, type=int, help='number of nodes to sample each time')
    parser.add_argument('--aug_data', default='ed', type=str, help='which kind of data augmentation to use')
    parser.add_argument('--fixSteps', default=10, type=int, help='steps to train on the same sampled graph')
    parser.add_argument("--gen", type=int, default=2, help="Default is 2.")
    parser.add_argument("--graph_type", type=str, default="KNN", help="epsilonNN, KNN, prob")
    parser.add_argument("--graph_metric_type", type=str, default="gat_attention")
    parser.add_argument("--top_k", type=int, default=10, help="Default is 10.")
    parser.add_argument("--epsilon", type=float, default=0.01, help="Default is 0.3.")
    parser.add_argument("--feature_denoise", type=bool, default=False, help="Default is False.")
    parser.add_argument("--num_per", type=int, default=16, help="Default is 16")
    parser.add_argument("--backbone", type=str, default="mixhop", help="GCN, GAT, GIN, mixhop")
    parser.add_argument("--IB_size", type=int, default=16, help="Default is 16.")
    parser.add_argument('--leaky', default=0.5, type=float, help='slope of leaky relu')
    parser.add_argument('--seedNum', default=100, type=int, help='number of seeds in patch masking')
    parser.add_argument('--maskDepth', default=2, type=int, help='depth to mask')
    parser.add_argument('--dropout', default=0.5, type=int, help='prob to drop')
    parser.add_argument('--propalpha', default=0.05, type=int, help='prob to drop')
    parser.add_argument("--layers-1",nargs="+",type=int,help="Layer dimensions separated by space (top). E.g. 200 20.")
    parser.add_argument("--layers-2",nargs="+",type=int,help="Layer dimensions separated by space (bottom). E.g. 200 200.")
    parser.set_defaults(layers_1=[200, 200, 200])
    parser.set_defaults(layers_2=[200, 200, 200])
    return parser.parse_args()
args = ParseArgs()